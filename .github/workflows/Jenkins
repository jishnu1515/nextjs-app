pipeline {
    agent any

    environment {
        MONGO_PASSWORD = credentials('MONGO_PASSWORD') // Set up Jenkins credentials
        SITE_URL = credentials('SITE_URL') // Set up Jenkins credentials
        DOCKER_USERNAME = credentials('DOCKER_USERNAME') // Set up Jenkins credentials
        DOCKER_PASSWORD = credentials('DOCKER_PASSWORD') // Set up Jenkins credentials
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID') // Set up Jenkins credentials
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY') // Set up Jenkins credentials
    }

    stages {
        stage('Checkout Source') {
            steps {
                git branch: 'deploy-with-docker-ec2', url: 'YOUR_REPOSITORY_URL' // Replace with your repo URL
            }
        }
        
        stage('Create .env file') {
            steps {
                script {
                    writeFile file: '.env', text: "MONGO_PASSWORD=${MONGO_PASSWORD}\nSITE_URL=${SITE_URL}\n"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t integrationninjas/nextjs-app .'
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                }
            }
        }

        stage('Publish Image to Docker Hub') {
            steps {
                sh 'docker push integrationninjas/nextjs-app:latest'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Configure AWS Credentials using AWS CLI
                    sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}"
                    sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}"
                    sh "aws configure set region ap-south-1" // Mumbai region
                    
                    sh 'docker pull integrationninjas/nextjs-app:latest'
                    sh 'docker rm -f nextjs-app-container || true' // Ignore error if the container doesn't exist
                    sh 'docker run -d -p 3000:3000 --name nextjs-app-container integrationninjas/nextjs-app'
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean workspace after the build
        }
    }
}
